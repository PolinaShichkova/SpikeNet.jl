        - 
        - type RecordedSpikes{T,R,TT,TI}
   179452     instance::T # the object we're recording from
        -     steps::R # the timesteps to record
        -     ts::Array{TT,1} # timesteps of recorded spikes
        -     id::Array{TI,1} # indices of recorded spikes
        - end
        - 
        - function choose_uint_type(max_val)
       96     for N in (UInt8, UInt16, UInt32, UInt64, UInt128)
    52839         if typemax(N) >= max_val
    56071             return N
        -         end
        -     end
        0     throw(OverflowError())
        - end
        - 
        - function RecordedSpikes(instance, steps)
        -     # Choose a compact representation for the data we'll have to store:
   526300     if issubtype(eltype(steps), Int)
        0         TT = choose_uint_type(maximum(steps))
        -     else
        0         TT = eltype(steps)
        -     end
        0     TI = choose_uint_type(length(instance))
        - 
       64     ts = Array(TT, 0)
       80     id = Array(TI, 0)
        0     RecordedSpikes{typeof(instance), typeof(steps), TT, TI}(
        -                    instance, steps, ts, id)
        - end
        - 
        - timestamps(r::RecordedSpikes, dt) = r.ts * dt
        - 
        - function reset!(r::RecordedSpikes)
        -     r.ts = Array(eltype(r.ts), 0)
        -     r.id = Array(eltype(r.id), 0)
        - end
        - 
        - @generated function record!{T}(data::RecordedSpikes{T}, step)
 16381896     subst = Dict()
       64     decls = []
        0     unpack_soa!(decls, subst, T, :group, :i, "")
        0     spike_expr = replace(spike(T), subst)
     3536     gen_func = quote
        0         if step in data.steps
        0             group = data.instance
        0             $(decls...)
        0             ts = data.ts
        0             id = data.id
        0             for i in 1:length(group)
        0                 @inbounds if $spike_expr
    36576                     push!(ts, step)
     2320                     push!(id, i)
        -                 end
        -             end
        -         end
        -     end
        0     return gen_func
        - end
        - 
        - 
